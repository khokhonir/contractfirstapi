/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse500;
import io.swagger.model.Todo;
import io.swagger.model.Todos;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-11-15T07:28:28.659Z[GMT]")
@Validated
public interface TodosApi {

    @Operation(summary = "Returns a list of all todos", description = "Returns all todos currently stored with the service. ", tags={ "todos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Todos.class))),
        
        @ApiResponse(responseCode = "500", description = "General Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/todos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Todos> todosGet();


    @Operation(summary = "Delete a todo", description = "Removes the todo matching the given id. ", tags={ "todos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "500", description = "General Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/todos/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> todosIdDelete();


    @Operation(summary = "Update a todo", description = "Updates the entire todo object matching the given id, with the exception of the id. ", tags={ "todos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Todo.class))),
        
        @ApiResponse(responseCode = "500", description = "General Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/todos/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Todo> todosIdPut(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Todo body);


    @Operation(summary = "Add a new todo", description = "Creates a new todo based on the given structure with a unique generated id. ", tags={ "todos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Todo.class))),
        
        @ApiResponse(responseCode = "500", description = "General Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/todos",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Todo> todosPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Todo body);

}

